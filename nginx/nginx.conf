load_module /usr/lib/nginx/modules/ngx_http_auth_jwt_module.so;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Upstream definitions (removed auth and clock proxies)

    # JWT validation map
    map $http_authorization $jwt_token {
        "~*^bearer (.+)$" $1;
        default "";
    }

    # Main server block
    server {
        listen 17107;
        server_name localhost;
        root /usr/share/nginx/html;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

        # Auth API routes removed - handled by Traefik

        # Clock API routes removed - handled by Traefik

        # X Connection API routes - PROTECTED (requires JWT)
        location /api/x/ {
            # JWT validation - check if token exists
            if ($jwt_token = "") {
                return 401 '{"error": "Authorization header required"}';
            }
            
            # Validate JWT locally (requires auth_jwt module)
            auth_jwt on;
            auth_jwt_key /etc/nginx/public.pem file;
            auth_jwt_alg RS256;
            
            # For now, return mock response - replace with actual X API
            add_header Content-Type application/json;
            return 200 '{"status": "connected", "x_id": "x-1", "permissions": ["x/operate", "x/observe"]}';
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Build info endpoint
        location /build-info.json {
            alias /build-info.json;
            add_header Content-Type application/json;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
        }

        # Version endpoint
        location /VERSION {
            alias /VERSION;
            add_header Content-Type text/plain;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
        }

        # Public homepage (no auth required)
        location = / {
            try_files /index.html =404;
        }

        # X Connection page - PROTECTED (requires JWT)
        location = /x/connect {
            # JWT validation - check if token exists
            if ($jwt_token = "") {
                return 302 /login;
            }
            
            # Validate JWT locally
            auth_jwt on;
            auth_jwt_key /etc/nginx/public.pem file;
            auth_jwt_alg RS256;
            
            try_files /x-connect.html =404;
        }

        # Vite assets directory
        location /assets/ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            try_files $uri =404;
        }

        # Static files (CSS, JS, images)
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            try_files $uri =404;
        }

        # Gateway Monitor proxy
        location /gateway {
            # JWT validation - check if token exists
            if ($jwt_token = "") {
                return 302 /login;
            }
            
            # Validate JWT locally
            auth_jwt on;
            auth_jwt_key /etc/nginx/public.pem file;
            auth_jwt_alg RS256;
            
            # Proxy to Traefik dashboard
            proxy_pass http://localhost:17109;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # All other routes serve index.html (SPA routing)
        location / {
            try_files $uri $uri/ /index.html;
        }
    }
}